"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksailing_pairs"] = self["webpackChunksailing_pairs"] || []).push([["docs_scores2_js"],{

/***/ "./docs/scores2.js":
/*!*************************!*\
  !*** ./docs/scores2.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_functions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/functions */ \"./node_modules/firebase/functions/dist/esm/index.esm.js\");\n\n\n\n\nconst graphMode = document.getElementById('graphMode')\nconst regattaEls = document.getElementById('regattas')\nconst peopleEls = document.getElementById('ppl')\nconst dataType = document.getElementById('dataType')\nconst fleetSelect = document.getElementById('fleetSelect')\nconst divSelect = document.getElementById('divSelect')\nconst posSelect = document.getElementById('posSelect')\nconst vertLabels = document.getElementById('vertLabels')\n\nvertLabels.addEventListener('change', () => {\n    verticalLabels = vertLabels.checked\n    updateGraph()\n})\n\nconst firebaseConfig = {\n    apiKey: 'AIzaSyAIlmAr8qfAjVweURTIvOmvNbZzlii1QXc',\n    authDomain: 'bhspairs.firebaseapp.com',\n    projectId: 'bhspairs',\n    storageBucket: 'bhspairs.appspot.com',\n    messagingSenderId: '853792589116',\n    appId: '1:853792589116:web:0d634d29b62ae7cab90a39',\n    measurementId: 'G-KPRQEN42TT',\n}\n\n// Initialize Firebase\n;(0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(firebaseConfig)\n\nconst functions = (0,firebase_functions__WEBPACK_IMPORTED_MODULE_2__.getFunctions)()\nconst getSchools = (0,firebase_functions__WEBPACK_IMPORTED_MODULE_2__.httpsCallable)(functions, 'getSchools')\nconst getRegattas = (0,firebase_functions__WEBPACK_IMPORTED_MODULE_2__.httpsCallable)(functions, 'getRegattas')\nconst getRegattaData = (0,firebase_functions__WEBPACK_IMPORTED_MODULE_2__.httpsCallable)(functions, 'getRegattaData')\n\nvar config\nconst ctx = document.getElementById('graph')\nvar chart = new Chart(ctx, config)\nlet datasets = []\nlet chartType = 'line'\n\nlet regattaData = {}\n\nconst seasons = ['f22', 's22']\nconst addRegattaButton = document.getElementById('addRegatta')\nconst addPersonButton = document.getElementById('addPerson')\n\n// let regattas = {\"south regional\": \"s22/south-regional-nwisa\",  \"oak gold\": \"s22/island-cup\", \"oak silver\": \"s22/islands-cup-silver\", \"SSP gold\": \"s22/nwisa-combined-division\", \"SSP silver\": \"s22/nwisa-combined-division-silver\", \"SSP bronze\": \"s22/nwisa-combined-division-bronze\", \"bellingham\": \"s22/bellingham-fleet-race\", \"anacortes gold\": \"s22/seafarers-cup-gold\", \"anacortes silver\": \"s22/seafarers-cup-silver\", \"fleet champs gold\": \"s22/nwisa-doublehanded\", \"fleet champs silver\": \"s22/nwisa-silver-fleet-champs\", \"PT open\": \"s22/port-townsend-open\"}\n// let regattas = {\"oak gold\": \"s22/island-cup\"}\nlet regattas = {}\nlet regattasList = {}\nlet inputNames = {}\nlet teams = []\nlet sailors = []\nlet curSailors = []\n// let inputNames = { 'Elliott Chalcraft': '#e0570d', 'Carter Anderson': '#3684a3', 'Ryan Downey': '#2de00d', 'Sabrina Anderson': '#d20de0', 'Barrett Lhamon': '#f00' }\nlet Type = 'Raw'\nlet verticalLabels = false\n\nconst titles = {\n    Raw: 'Raw score (Lower is better)',\n    Points: 'Number of boats beat (Higher is better)',\n    Ratio: 'Percentage of fleet beat (Higher is better)',\n}\n\nsetup()\nasync function setup() {\n    // const getSchools = firebase.functions().httpsCallable('getSchools')\n    await addRegatta()\n    readData()\n    await loadData()\n    await addPerson()\n    readData()\n    updateGraph()\n}\n\nfunction getData(type, name, fleet = undefined, division = undefined, position = undefined, pair = undefined, regatta = undefined) {\n    let data = {}\n    regattaData.forEach((p) => {\n        if (p.name == name) {\n            p.races.forEach((r) => {\n                if ((regatta != undefined && r.venue == regatta) || regatta == undefined) {\n                    if (((division != 'All' && r.division == division) || division == 'All') && ((position != 'All' && r.position == position) || position == 'All') && ((fleet != 'All' && r.fleet == fleet) || fleet == 'All')) {\n                        if (type == 'Raw') {\n                            if (!isNaN(r.score)) {\n                                data[`${regatta} ${r.division}${r.number}`] = r.score\n                            } else {\n                                data[`${regatta} ${r.division}${r.number}`] = r.teams.length + 1\n                            }\n                        }\n                        if (type == 'Points') {\n                            if (!isNaN(r.score)) {\n                                data[`${regatta} ${r.division}${r.number}`] = r.teams.length - r.score + 1\n                            } else {\n                                data[`${regatta} ${r.division}${r.number}`] = r.teams.length + 1\n                            }\n                        }\n                        if (type == 'Ratio') {\n                            if (!isNaN(r.score)) {\n                                data[`${regatta} ${r.division}${r.number}`] = (1 - (r.score - 1) / r.teams.length) * 100\n                            } else {\n                                data[`${regatta} ${r.division}${r.number}`] = 0\n                            }\n                        }\n                    }\n                }\n            })\n        }\n    })\n    return data\n}\nfunction compareRace(first, second) {\n    let longF = false\n    let longS = false\n    let firstDiv = first[first.length - 2]\n    if (firstDiv != 'A' && firstDiv != 'B') {\n        firstDiv = first[first.length - 3]\n        longF = true\n    }\n    let secondDiv = second[second.length - 2]\n    if (secondDiv != 'A' && secondDiv != 'B') {\n        secondDiv = second[second.length - 3]\n        longS = true\n    }\n    //Compare race numbers\n\n    if (longF && !longS) return 1\n    else if (!longF && longS) return -1\n\n    if (longF && longS) {\n        if (first[first.length - 2] > second[second.length - 2]) {\n            return 1\n        }\n        if (first[first.length - 2] < second[second.length - 2]) {\n            return -1\n        }\n    }\n    if (first[first.length - 1] > second[second.length - 1]) {\n        return 1\n    }\n    if (first[first.length - 1] < second[second.length - 1]) {\n        return -1\n    }\n\n    //Compare divisions\n    if (firstDiv > secondDiv) {\n        return 1\n    }\n    if (firstDiv < secondDiv) {\n        return -1\n    }\n    return 0\n}\nasync function loadData() {\n    loadingEl.style.display = 'block'\n    // console.log(regattasBox.value)\n    readData()\n    console.log(regattas)\n    // options = {\n    //     method: 'POST',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify({ regattas: regattas }),\n    // }\n    // const response = await fetch(API_URL + '/scores', options)\n    // const json = await response.json()\n    regattaData = await getRegattaData({ regattas: regattas })\n    regattaData = regattaData.data\n    // regattaData = json\n    console.log('REGATTADAT', regattaData)\n    curSailors = regattaData.filter(function (el) {\n        return teams.includes(el.home)\n    })\n    curSailors = curSailors.map((person) => person.name)\n    //   console.log(curSailors)\n    //   sailors = json.people.map((person) => person.name)\n    //   console.log(sailors)\n    // console.log('Fetched Data', json)\n    updateNames()\n    updateGraph()\n    loadingEl.style.display = 'none'\n}\n\nasync function updateGraph() {\n    // let namess = JSON.parse(regattasBox.value)\n    //   let namess = { 'Elliott Chalcraft': '#e0570d', 'Carter Anderson': '#3684a3', 'Ryan Downey': '#2de00d', 'Sabrina Anderson': '#d20de0', 'Barrett Lhamon': '#f00' }\n    //   let nameList = Object.keys(namess)\n\n    readData()\n\n    let prev = 0\n    let xTicks = []\n    let nameLabels = []\n    datasets = []\n    let maxVals = []\n    Object.keys(regattas).forEach((regatta) => {\n        let data = {}\n        let races = []\n        let names = Object.keys(inputNames)\n        console.log(regattaData)\n        if (regattaData != undefined && regattaData.length > 0) {\n            names.forEach((p) => {\n                try {\n                    let fleet = fleetSelect.value\n                    if (fleet == 'All' && inputNames[p].fleet != 'All') fleet = inputNames[p].fleet\n                    let div = divSelect.value\n                    if (div == 'All' && inputNames[p].div != 'All') div = inputNames[p].div\n                    let pos = posSelect.value\n                    if (pos == 'All' && inputNames[p].pos != 'All') pos = inputNames[p].pos\n                    console.log('FLTDIVPOS', fleet, div, pos)\n                    data[p] = getData(Type, p, fleet, div, pos, undefined, regatta)\n                    console.log(data[p])\n                    races.push(...Object.keys(data[p]))\n                    maxVals.push(Math.max(Object.values(data[p])))\n                } catch (error) {\n                    console.error(error)\n                }\n            })\n            races = races.sort(compareRace)\n            xTicks.push(...races)\n            xTicks = [...new Set(xTicks)]\n            console.log('XTICKS', xTicks)\n            names.forEach((p) => {\n                console.log(p, data[p])\n                if (Object.keys(data[p]).length > 0) {\n                    let found = false\n                    datasets.forEach((dataset) => {\n                        if (dataset.label == p) {\n                            dataset.data = {\n                                ...dataset.data,\n                                ...data[p],\n                            }\n                            found = true\n                        }\n                    })\n                    if (!found) {\n                        datasets.push({\n                            label: p,\n                            data: data[p],\n                            backgroundColor: inputNames[p].color + '55',\n                            borderColor: inputNames[p].color,\n                            borderWidth: 5,\n                            pointRadius: 5,\n                            fill: false,\n                            pointHitRadius: 10,\n                        })\n                    }\n                }\n            })\n            console.log(`Input names: ${names}`)\n            /*trendlineLinear: {\n          colorMin: colors[colorNum],\n          lineStyle: 'dotted',\n          width: 2,\n        }, */\n        }\n    })\n\n    console.log('datasets:', datasets, 'labels:', xTicks)\n    //Graph ppl\n    config = {\n        type: chartType,\n        data: {\n            labels: [...xTicks],\n            datasets: datasets,\n        },\n        options: {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                title: {\n                    display: true,\n                    text: titles[Type],\n                },\n            },\n            scales: {\n                x: {\n                    ticks: {\n                        autoSkip: false,\n                    },\n                },\n            },\n        },\n    }\n\n    if (Type == 'Ratio') {\n        config.options.scales.y = {\n            max: 100,\n            min: 0,\n            ticks: {\n                stepSize: 5,\n            },\n        }\n    }\n    if (verticalLabels) {\n        config.options.scales.x = {\n            ticks: {\n                maxRotation: 90,\n                minRotation: 90,\n                autoSkip: false,\n            },\n        }\n    }\n    /*scales: {\n                x: {\n                    ticks: {\n                        callback: function (val, index) {\n                            console.log('val index', val, index)\n                            return xTicks[index]\n                        },\n                    },\n                },\n            },\n            animations: {\n                tension: {\n                    duration: 1000,\n                    easing: 'linear',\n                    from: 0.7,\n                    to: 0,\n                    loop: true,\n                },\n            }, */\n    // console.log('config', config)\n    config.type = 'line'\n    chart.destroy()\n    chart = new Chart(ctx, config)\n    config.type = 'scatter'\n    chart.destroy()\n    chart = new Chart(ctx, config)\n\n    loadingEl.style.display = 'none'\n}\n\nfunction readData() {\n    regattas = {}\n    inputNames = {}\n    teams = []\n\n    //   console.log('reading data', regattaEls.children.length, peopleEls.children.length)\n\n    Array.from(regattaEls.children).forEach((el) => {\n        //regattaSelect.options[regattaSelect.selectedIndex].text\n        // console.log(el.children[2].options[el.children[2].selectedIndex].text)\n        if (el.children[2].value == 'All') {\n            Array.from(el.children[2].options).forEach((option) => {\n                if (option.text != 'All') regattas[option.text] = option.value\n            })\n            // regattas = { ...el.children[2].value }\n        } else {\n            regattas[el.children[2].options[el.children[2].selectedIndex].text] = el.children[2].value\n        }\n\n        if (!teams.includes(el.children[1].options[el.children[1].selectedIndex].text)) teams.push(el.children[1].options[el.children[1].selectedIndex].text)\n    })\n    regattas = Object.keys(regattas)\n        .sort(function (a, b) {\n            if (regattasList[a] != undefined && regattasList[b] != undefined) return new Date(regattasList[a].date) - new Date(regattasList[b].date)\n            return 0\n        })\n        .reduce((obj, key) => {\n            obj[key] = regattas[key]\n            return obj\n        }, {})\n\n    Array.from(peopleEls.children).forEach((el) => {\n        inputNames[el.children[0].options[el.children[0].selectedIndex].text] = {\n            color: el.children[1].value,\n            fleet: el.children[2].value,\n            div: el.children[3].value,\n            pos: el.children[4].value,\n        }\n    })\n\n    console.log('ReadData:', regattas, teams, inputNames)\n}\n\nlet types = ['bar', 'line', 'scatter']\ngraphMode.addEventListener('click', () => {\n    type(types[(types.indexOf(config.type) + 1) % 3])\n})\ndataType.addEventListener('change', () => {\n    Type = dataType.value\n    updateGraph()\n})\nfleetSelect.addEventListener('change', () => {\n    updateGraph()\n})\ndivSelect.addEventListener('change', () => {\n    updateGraph()\n})\nposSelect.addEventListener('change', () => {\n    updateGraph()\n})\n\nfunction type(type) {\n    config.type = type\n    // chartType = type;\n    console.log(config.type)\n    chart.destroy()\n    chart = new Chart(ctx, config)\n}\n\nfunction updateNames() {\n    Array.from(peopleEls.children).forEach((el) => {\n        let prevSelected = el.children[0].options[el.children[0].selectedIndex].text\n\n        while (el.children[0].firstChild) {\n            el.children[0].removeChild(el.children[0].firstChild)\n        }\n\n        curSailors.forEach((sailor) => {\n            const nameOpt = document.createElement('option')\n            nameOpt.value, (nameOpt.innerText = sailor)\n            el.children[0].append(nameOpt)\n        })\n        const allOpt = document.createElement('option')\n        allOpt.value = 'All'\n        allOpt.text = 'All'\n        el.children[0].append(allOpt)\n\n        console.log(curSailors.indexOf(prevSelected), el.children[0].options)\n        if (curSailors.indexOf(prevSelected) != -1) {\n            el.children[0].selectedIndex = curSailors.indexOf(prevSelected)\n        } else {\n            // console.log('FIRST CHILD:', el.children[0].options[0].text)\n            el.children[0].options[0].selected = true\n        }\n    })\n}\n\nasync function updateRegattas(teamSelect, regattaSelect, season) {\n    loadingEl.style.display = 'block'\n\n    // options = {\n    //     method: 'POST',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify({ link: teamSelect.value, season: season }),\n    // }\n    // const response = await fetch(API_URL + '/regattas', options)\n    // let json = await response.json()\n\n    let regattasList = await getRegattas({ schoolLink: teamSelect.value, season: season })\n    regattasList = regattasList.data\n\n    // console.log(response.status)\n    if (Object.keys(regattasList).length > 0) {\n        // let curList = json.regattas\n        // regattasList = {\n        //     ...json.regattas,\n        // }\n        console.log(regattasList)\n\n        if (regattaSelect.firstChild) {\n            //Deletes regatta even if selected on another team :/\n            // delete regattas[regattaSelect.options[regattaSelect.selectedIndex].text]\n        }\n\n        while (regattaSelect.firstChild) {\n            regattaSelect.removeChild(regattaSelect.firstChild)\n        }\n\n        Object.keys(regattasList).forEach((regatta) => {\n            const regattaOpt = document.createElement('option')\n            regattaOpt.value = regattasList[regatta].link\n            regattaOpt.text = regatta\n            regattaSelect.append(regattaOpt)\n        })\n        const allOpt = document.createElement('option')\n        allOpt.value = 'All'\n        allOpt.text = 'All'\n        regattaSelect.append(allOpt)\n\n        console.log('Regattas Filled in')\n    } else {\n        alert('Team not found')\n    }\n    loadingEl.style.display = 'none'\n}\n\nasync function addRegatta() {\n    console.log('Adding regatta')\n\n    const regatta = document.createElement('div')\n    regatta.classList.add('dataset')\n\n    const seasonSelect = document.createElement('select')\n    seasonSelect.classList.add('selectBox')\n\n    seasons.forEach((season) => {\n        const seasonOpt = document.createElement('option')\n        seasonOpt.value, (seasonOpt.innerText = season)\n        seasonSelect.append(seasonOpt)\n    })\n\n    const teamSelect = document.createElement('select')\n    teamSelect.classList.add('selectBox')\n\n    let schools = await getSchools({ district: 'NWISA' })\n    console.log(schools.data)\n\n    Object.keys(schools.data).forEach((teamName) => {\n        const teamOpt = document.createElement('option')\n        teamOpt.value = schools.data[teamName]\n        teamOpt.text = teamName\n        teamSelect.append(teamOpt)\n    })\n    loadingEl.style.display = 'none'\n\n    const regattaSelect = document.createElement('select')\n    regattaSelect.classList.add('selectBox')\n\n    await updateRegattas(teamSelect, regattaSelect, seasonSelect.value)\n\n    seasonSelect.addEventListener('change', async () => {\n        await updateRegattas(teamSelect, regattaSelect, seasonSelect.value)\n        //regattas[regattaSelect.options[regattaSelect.selectedIndex].text] = regattaSelect.value\n        readData()\n        await loadData()\n    })\n    teamSelect.addEventListener('change', async () => {\n        await updateRegattas(teamSelect, regattaSelect, seasonSelect.value)\n        //regattas[regattaSelect.options[regattaSelect.selectedIndex].text] = regattaSelect.value\n        readData()\n        await loadData()\n    })\n    regattaSelect.addEventListener('change', async () => {\n        console.log(regattaSelect.value, 'VAL')\n        if (regattaSelect.value != '') {\n            //regattas[regattaSelect.options[regattaSelect.selectedIndex].text] = regattaSelect.value\n            readData()\n            await loadData()\n        }\n    })\n    // while (Object.keys(regattas).length === 0) {\n    Array.from(regattaEls.children).forEach((el) => {\n        regattas[el.children[2].options[el.children[2].selectedIndex].text] = el.children[2].value\n    })\n    // for (let i = 0; i < regattaEls.children.length - 1; i++) {\n    //     let el = regattaEls.children[i]\n    //     //regattaSelect.options[regattaSelect.selectedIndex].text\n    //     console.log(el.children[2].options[el.children[2].selectedIndex].text)\n    //     regattas[el.children[2].options[el.children[2].selectedIndex].text] = el.children[2].value\n    // }\n    // }\n    // regattas[regattaSelect.options[regattaSelect.selectedIndex].text] = regattaSelect.value\n    // await loadData()\n\n    readData()\n\n    const flexGap = document.createElement('div')\n    flexGap.classList.add('flexGap')\n\n    const delDataset = document.createElement('button')\n    delDataset.classList.add('delDataset', 'fa-lg', 'fa-solid', 'fa-trash')\n    // delDataset.innerHTML = '-'\n    delDataset.addEventListener('click', () => {\n        // delete regattas[regattaSelect.options[regattaSelect.selectedIndex].text]\n        regatta.remove()\n        updateGraph()\n    })\n\n    regatta.append(seasonSelect)\n    regatta.append(teamSelect)\n    regatta.append(regattaSelect)\n    regatta.append(flexGap)\n    regatta.append(delDataset)\n    regattaEls.append(regatta)\n}\n\naddRegattaButton.addEventListener('click', () => {\n    addRegatta()\n})\nasync function addPerson() {\n    console.log('Adding person')\n    const person = document.createElement('div')\n    person.classList.add('dataset')\n\n    const nameSelect = document.createElement('select')\n    nameSelect.classList.add('selectBox')\n\n    console.log('sailors', curSailors)\n    curSailors.forEach((sailor) => {\n        const nameOpt = document.createElement('option')\n        nameOpt.value, (nameOpt.innerText = sailor)\n        nameSelect.append(nameOpt)\n    })\n\n    const colorSelect = document.createElement('input')\n    colorSelect.type = 'color'\n    colorSelect.classList.add('colSelect')\n\n    const fleetSel = document.createElement('select')\n    fleetSel.classList.add('selectBox', 'tooltip')\n    fleetSel.dataset['tooltip'] = 'Select Fleet'\n    let fleets = ['All', 'Gold', 'Silver']\n    fleets.forEach((fleet) => {\n        const fleetOpt = document.createElement('option')\n        fleetOpt.value, (fleetOpt.innerText = fleet)\n        fleetSel.append(fleetOpt)\n    })\n\n    const divSelect = document.createElement('select')\n    divSelect.classList.add('selectBox')\n    let divisions = ['All', 'A', 'B']\n    divisions.forEach((division) => {\n        const divOpt = document.createElement('option')\n        divOpt.value, (divOpt.innerText = division)\n        divSelect.append(divOpt)\n    })\n\n    const posSelect = document.createElement('select')\n    posSelect.classList.add('selectBox')\n    let positions = ['All', 'Skipper', 'Crew']\n    positions.forEach((position) => {\n        const posOpt = document.createElement('option')\n        posOpt.value, (posOpt.innerText = position)\n        posSelect.append(posOpt)\n    })\n\n    nameSelect.addEventListener('change', () => {\n        updateGraph()\n    })\n    colorSelect.addEventListener('change', () => {\n        updateGraph()\n    })\n    fleetSel.addEventListener('change', async () => {\n        updateGraph()\n    })\n    divSelect.addEventListener('change', async () => {\n        updateGraph()\n    })\n    posSelect.addEventListener('change', async () => {\n        updateGraph()\n    })\n\n    const flexGap = document.createElement('div')\n    flexGap.classList.add('flexGap')\n\n    const delDataset = document.createElement('button')\n    delDataset.classList.add('delDataset', 'fa-lg', 'fa-solid', 'fa-trash')\n    delDataset.addEventListener('click', () => {\n        person.remove()\n        updateGraph()\n    })\n\n    person.append(nameSelect)\n    person.append(colorSelect)\n    person.append(fleetSel)\n    person.append(divSelect)\n    person.append(posSelect)\n    person.append(flexGap)\n    person.append(delDataset)\n    peopleEls.append(person)\n    updateGraph()\n}\n\naddPersonButton.addEventListener('click', () => {\n    addPerson()\n})\n\n\n//# sourceURL=webpack://sailing-pairs/./docs/scores2.js?");

/***/ })

}]);