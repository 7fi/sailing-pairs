"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunksailing_pairs"] = self["webpackChunksailing_pairs"] || []).push([["docs_pairs_js"],{

/***/ "./docs/pairs.js":
/*!***********************!*\
  !*** ./docs/pairs.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"absent\": () => (/* binding */ absent),\n/* harmony export */   \"byBoatCount\": () => (/* binding */ byBoatCount),\n/* harmony export */   \"byPos\": () => (/* binding */ byPos),\n/* harmony export */   \"byPrevParts\": () => (/* binding */ byPrevParts),\n/* harmony export */   \"getPairsOfficial\": () => (/* binding */ getPairsOfficial),\n/* harmony export */   \"getPrevPartners\": () => (/* binding */ getPrevPartners),\n/* harmony export */   \"locked\": () => (/* binding */ locked),\n/* harmony export */   \"makeNames\": () => (/* binding */ makeNames),\n/* harmony export */   \"makePairs\": () => (/* binding */ makePairs),\n/* harmony export */   \"names\": () => (/* binding */ names),\n/* harmony export */   \"season\": () => (/* binding */ season),\n/* harmony export */   \"slotsLength\": () => (/* binding */ slotsLength),\n/* harmony export */   \"team\": () => (/* binding */ team)\n/* harmony export */ });\n/* harmony import */ var _info_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./info.js */ \"./docs/info.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"./docs/client.js\");\n/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/app */ \"./node_modules/firebase/app/dist/esm/index.esm.js\");\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! firebase/firestore */ \"./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n\r\n\r\n\r\n\r\n\r\nconst left = document.getElementById('left')\r\nconst right = document.getElementById('right')\r\nconst nameList = document.getElementById('listContainer')\r\nconst pairingHolder = document.getElementById('pairingHolder')\r\nconst loadHolder = document.getElementById('loadDropContainer')\r\nconst loadText = document.getElementById('loadText')\r\nconst loadSaveContainer = document.getElementById('loadSaveContainer')\r\nconst localSaved = document.getElementById('localSaved')\r\nconst officialList = document.getElementById('officialList')\r\nconst loadPermBtn = document.getElementById('loadPermBtn')\r\nconst seasonSelect = document.getElementById('seasonSelect')\r\nconst teamSelect = document.getElementById('teamSelect')\r\n\r\nconst countNamesHolder = document.getElementById('countNamesHolder')\r\nconst countWindow = document.getElementById('countWindow')\r\nconst countButton = document.getElementById('countButton')\r\n\r\nconst nameInput = document.getElementById('nameInput')\r\nconst saveButton = document.getElementById('save')\r\nconst saveButtonLocal = document.getElementById('saveLocal')\r\nconst saveButtonOfficial = document.getElementById('saveOfficial')\r\nconst selectAbsent = document.getElementById('selectAbsent')\r\nconst selectLocked = document.getElementById('selectLocked')\r\nconst resetPairs = document.getElementById('resetPairs')\r\nconst randomPairs = document.getElementById('randomPairs')\r\n\r\nconst picModeButton = document.getElementById('picMode')\r\nconst boatDisplay = document.getElementById('boatDisplay')\r\nconst betoEl = document.getElementById('betoEl')\r\n\r\nconst boatCountRnd = document.getElementById('boatCountRnd')\r\nconst prevPartRnd = document.getElementById('prevPartRnd')\r\n\r\nconst prevPairs = document.getElementById('prevPairs')\r\nconst prevPairsWindow = document.getElementById('prevPairsWindow')\r\nconst prevPairsHolder = document.getElementById('prevPairsHolder')\r\nconst selectedName = document.getElementById('selectedName')\r\n\r\nlet picMode = false\r\nlet selAbsent = false\r\nlet selLocked = false\r\nlet byPos = true\r\nlet byBoatCount = false\r\nlet byPrevParts = true\r\nlet absent = []\r\nlet locked = []\r\nlet boatDisplayVal = 'true'\r\n\r\nlet pageReads = 0\r\n\r\n// Initialize Firebase\r\n;(0,firebase_app__WEBPACK_IMPORTED_MODULE_2__.initializeApp)(_info_js__WEBPACK_IMPORTED_MODULE_0__.firebaseConfig)\r\n// const analytics = getAnalytics(app)\r\nconst db = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getFirestore)()\r\n\r\nconst pairsDB = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'pairs')\r\nconst backupDB = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'backup-pairs')\r\nconst officialDB = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.collection)(db, 'official-pairs')\r\n\r\n// getDocs(pairsDB).then((snapshot) => {\r\n//     snapshot.docs.forEach((doc) => {\r\n//         console.log(doc.data(), doc.id)\r\n//     })\r\n// })\r\n\r\nlet mobile = window.matchMedia(`only screen and (max-width: ${_info_js__WEBPACK_IMPORTED_MODULE_0__.mobileSize})`).matches\r\nconst observer = new ResizeObserver((entries) => {\r\n    mobile = window.matchMedia(`only screen and (max-width: ${_info_js__WEBPACK_IMPORTED_MODULE_0__.mobileSize})`).matches\r\n})\r\nobserver.observe(document.body)\r\n\r\nseasonSelect.value = localStorage.getItem('season') ? localStorage.getItem('season') : seasonSelect.value\r\nlet season = seasonSelect.value\r\nteamSelect.value = localStorage.getItem('team') ? localStorage.getItem('team') : teamSelect.value\r\nlet team = teamSelect.value\r\n\r\nlet names = _info_js__WEBPACK_IMPORTED_MODULE_0__.people[season][team].map((person) => person.name)\r\n\r\nseasonSelect.onchange = async function () {\r\n    season = seasonSelect.value\r\n    names = _info_js__WEBPACK_IMPORTED_MODULE_0__.people[season][team].map((person) => person.name)\r\n    slotsLength = Math.floor(names.length / 2) * 3\r\n    document.documentElement.style.setProperty('--slotCount', slotsLength / 3)\r\n    makePairs()\r\n    makeNames()\r\n    let snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(officialDB)\r\n    pageReads++\r\n    updateOfficial(snapshot)\r\n    localStorage.setItem('season', season)\r\n}\r\n\r\nteamSelect.onchange = function () {\r\n    team = teamSelect.value\r\n    names = _info_js__WEBPACK_IMPORTED_MODULE_0__.people[season][team].map((person) => person.name)\r\n    slotsLength = Math.floor(names.length / 2) * 3\r\n    document.documentElement.style.setProperty('--slotCount', slotsLength / 3)\r\n    makePairs()\r\n    makeNames()\r\n    localStorage.setItem('team', team)\r\n}\r\n\r\n// let betoQuotes = ['Hi',\"I'm bad at sailing!\"];\r\nlet betoClicks = 0\r\nlet sabrinaClicks = 0\r\nlet elliottClicks = 0\r\n\r\nlet prevClickName = ''\r\nlet prevClickTime\r\n\r\nlet slotsLength = Math.floor(names.length / 2) * 3\r\ndocument.documentElement.style.setProperty('--slotCount', slotsLength / 3)\r\ndocument.documentElement.style.setProperty('--colCount', 3)\r\nconsole.log(slotsLength, 'slotsLength')\r\n\r\nparseUrl()\r\nmakePairs(JSON.parse(window.localStorage.getItem('tempPairs')))\r\nmakeNames(JSON.parse(window.localStorage.getItem('tempPairs')))\r\n\r\ngetLocalSaved()\r\n\r\n// dragging on desktop\r\nnameList.addEventListener('dragover', (e) => {\r\n    e.preventDefault()\r\n    if (!mobile) {\r\n        const draggingEl = document.querySelector('.dragging')\r\n        if (draggingEl) nameList.appendChild(draggingEl)\r\n    }\r\n})\r\n\r\npairingHolder.addEventListener('dragover', (e) => {\r\n    e.preventDefault()\r\n\r\n    const afterElement = getDragAfterElement(e.clientY)\r\n    const draggingEl = document.querySelector('.dragging2')\r\n\r\n    if (afterElement == null && draggingEl) {\r\n        pairingHolder.appendChild(draggingEl)\r\n    } else if (draggingEl) {\r\n        pairingHolder.insertBefore(draggingEl, afterElement)\r\n    }\r\n})\r\n\r\n// deselecting on mobile\r\nnameList.addEventListener('click', (e) => {\r\n    e.preventDefault()\r\n    if (e.target == nameList && mobile) {\r\n        const tempSelected = document.querySelector('.selected')\r\n        if (tempSelected != null || tempSelected != undefined) {\r\n            nameList.append(tempSelected)\r\n            tempSelected.classList.remove('selected')\r\n            console.log('Removed 2')\r\n        }\r\n    }\r\n})\r\n\r\n// loadPermBtn.addEventListener('click', async () => {\r\n//     loadingEl.style.display = 'block'\r\n//     loadingEl.style.display = 'none'\r\n\r\n//     makeNames(json.pairs[0].pairs)\r\n//     makeNames(json.pairs[0].pairs)\r\n// })\r\n\r\n//Saving pairings\r\nsaveButton.addEventListener('click', async () => {\r\n    if (nameInput.value != '') {\r\n        let pairs = { name: nameInput.value }\r\n        for (let i = 0; i < slotsLength; i++) {\r\n            if (i % 3 == 0) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (pairingHolder.children[i / 3].children[j + 1] != undefined && pairingHolder.children[i / 3].children[j + 1].children[0]) {\r\n                        pairs[i + j] = pairingHolder.children[i / 3].children[j + 1].children[0].textContent\r\n                    } else {\r\n                        pairs[i + j] = ''\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(pairs)\r\n        nameInput.value = ''\r\n        loadingEl.style.display = 'block'\r\n        ;(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.addDoc)(pairsDB, pairs)\r\n        ;(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.addDoc)(backupDB, pairs)\r\n        loadingEl.style.display = 'none'\r\n        // console.log(json)\r\n\r\n        //reset\r\n        makePairs()\r\n        makeNames()\r\n    } else {\r\n        alert('Please Enter Your Name')\r\n    }\r\n})\r\n/*{0: 'Owen', 1: 'Talia', 2: '', 3: 'Nick', 4: 'Fin', 5: '', 6: 'Joseph', 7: 'Holden', 8: '', 9: 'Nelson', 10: 'Cyrus', 11: '', 12: 'Suraj', 13: 'Sharkey', 14: '', 15: 'Adam', 16: 'Gretchen I', 17: '', 18: 'Luke', 19: 'Payton', 20: '', 21: 'Chris', 22: 'Andrea', 23: '', 24: 'Elliott', 25: 'Carson', 26: '', 27: 'Carter', 28: 'Gretchen F', 29: '', 30: 'Jeffrey', 31: 'Stella', 32: '', 33: 'Isaia', 34: 'Maura', 35: '', 36: 'Nolan', 37: 'Kai', 38: '', 39: '', 40: '', 41: '', 42: '', 43: '', 44: '', 45: '', 46: '', 47: '', 48: '', 49: '', 50: '', name: 'temp'} */\r\nsaveButtonOfficial.addEventListener('click', async () => {\r\n    if (nameInput.value != '') {\r\n        if (confirm('Are you sure you want to save these pairings officially?')) {\r\n            let inputDate = prompt('Enter date of pairings (Leave blank for todays date) (YYYY-MM-DD)')\r\n            if (inputDate != '' && inputDate.length != 10) {\r\n                alert('Invalid Date Format')\r\n                return\r\n            } else {\r\n                inputDate = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.formatDate)(new Date(), 0)\r\n            }\r\n            let pairs = { name: nameInput.value, practiceDate: inputDate, season: season }\r\n            for (let i = 0; i < slotsLength; i++) {\r\n                if (i % 3 == 0) {\r\n                    for (let j = 0; j < 3; j++) {\r\n                        if (pairingHolder.children[i / 3].children[j + 1] != undefined && pairingHolder.children[i / 3].children[j + 1].children[0]) {\r\n                            pairs[i + j] = pairingHolder.children[i / 3].children[j + 1].children[0].textContent\r\n                        } else {\r\n                            pairs[i + j] = ''\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(pairs)\r\n            nameInput.value = ''\r\n\r\n            //send to server\r\n            loadingEl.style.display = 'block'\r\n            ;(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.addDoc)(officialDB, pairs)\r\n            loadingEl.style.display = 'none'\r\n\r\n            //reset\r\n            makePairs()\r\n            makeNames()\r\n        }\r\n    } else {\r\n        alert('Please Enter Your Name')\r\n    }\r\n})\r\nsaveButtonLocal.addEventListener('click', () => {\r\n    if (nameInput.value != '') {\r\n        let pairs = { name: nameInput.value }\r\n        for (let i = 0; i < slotsLength; i++) {\r\n            if (i % 3 == 0) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    if (pairingHolder.children[i / 3].children[j + 1] != undefined && pairingHolder.children[i / 3].children[j + 1].children[0]) {\r\n                        pairs[i + j] = pairingHolder.children[i / 3].children[j + 1].children[0].textContent\r\n                    } else {\r\n                        pairs[i + j] = ''\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(pairs)\r\n        nameInput.value = ''\r\n\r\n        let oldpairs = JSON.parse(window.localStorage.getItem('pairs'))\r\n        if ((oldpairs != undefined) & (oldpairs != null)) {\r\n            oldpairs.push(pairs)\r\n        } else {\r\n            oldpairs = []\r\n            oldpairs.push(pairs)\r\n        }\r\n\r\n        window.localStorage.setItem('pairs', JSON.stringify(oldpairs))\r\n\r\n        //reset\r\n        makePairs()\r\n        makeNames()\r\n    } else {\r\n        alert('Please Enter Your Name')\r\n    }\r\n})\r\n\r\ncountButton.addEventListener('click', () => {\r\n    countWindow.style.display = 'block'\r\n})\r\ncountWindow.addEventListener('click', (e) => {\r\n    if (e.target == countWindow) countWindow.style.display = 'none'\r\n})\r\nprevPairs.addEventListener('click', (e) => {\r\n    if (e.target == prevPairs) prevPairs.style.display = 'none'\r\n})\r\n\r\nloadText.addEventListener('click', () => {\r\n    if (loadText.style.display == 'grid') {\r\n        loadSaveContainer.style.display = 'none'\r\n    } else {\r\n        loadSaveContainer.style.display = 'grid'\r\n    }\r\n})\r\nloadSaveContainer.addEventListener('click', (e) => {\r\n    if (e.target == loadSaveContainer) loadSaveContainer.style.display = 'none'\r\n})\r\n\r\nselectAbsent.addEventListener('click', () => {\r\n    selAbsent = !selAbsent\r\n    selectAbsent.classList.toggle('absent')\r\n})\r\nselectLocked.addEventListener('click', () => {\r\n    selLocked = !selLocked\r\n    selectLocked.classList.toggle('locked')\r\n})\r\n\r\n//Reset pairs button\r\nresetPairs.addEventListener('click', () => {\r\n    makeNames()\r\n    makePairs()\r\n    locked = []\r\n    absent = []\r\n\r\n    saveTemp()\r\n\r\n    document.querySelectorAll('.name').forEach((name) => {\r\n        if (name.classList.contains('absent')) name.classList.remove('absent')\r\n        if (name.classList.contains('locked')) name.classList.remove('locked')\r\n    })\r\n})\r\n\r\nboatDisplay.addEventListener('click', () => {\r\n    if (boatDisplayVal == 'true') {\r\n        boatDisplayVal = 'false'\r\n    } else {\r\n        boatDisplayVal = 'true'\r\n    }\r\n    document.querySelectorAll('.pairSlotHolder').forEach((slot) => {\r\n        slot.setAttribute('boatDisplay', boatDisplayVal)\r\n    })\r\n})\r\n\r\nfunction makePairs(inputPairs) {\r\n    // Creates pair slots either empty or populated with inputPairs object\r\n    // deletes all previous pair slots\r\n    while (pairingHolder.firstChild) {\r\n        pairingHolder.removeChild(pairingHolder.firstChild)\r\n    }\r\n    let newNames\r\n    // console.log(inputPairs)\r\n    if (inputPairs != undefined) {\r\n        let newInput = Object.values(inputPairs)\r\n        if (newInput.length <= slotsLength - 6) {\r\n            newNames = newInput.slice(0, (slotsLength / 3) * 2)\r\n            for (let i = 0; i < newNames.length; i++) {\r\n                if (i % 3 == 2) {\r\n                    newNames.splice(i, 0, '')\r\n                }\r\n            }\r\n        } else {\r\n            newNames = Object.values(inputPairs)\r\n        }\r\n    }\r\n    // console.log(newNames)\r\n    // Creates all pair slots\r\n    for (let i = 0; i < slotsLength; i++) {\r\n        if (i % 3 == 0) {\r\n            const pairSlotHolder = document.createElement('div')\r\n            pairSlotHolder.classList.add('pairSlotHolder')\r\n            pairSlotHolder.setAttribute('boatDisplay', boatDisplayVal)\r\n            pairSlotHolder.setAttribute('draggable', true)\r\n\r\n            pairSlotHolder.addEventListener('dragstart', (e) => {\r\n                if (e.target == pairSlotHolder) pairSlotHolder.classList.add('dragging2')\r\n            })\r\n            pairSlotHolder.addEventListener('dragend', () => {\r\n                pairSlotHolder.classList.remove('dragging2')\r\n            })\r\n            const pairSlotDrag = document.createElement('div')\r\n            pairSlotDrag.classList.add('pairDrag', 'fa-lg', 'fa-bars', 'fa-solid')\r\n            // pairSlotDrag.addEventListener('dragend')\r\n            pairSlotHolder.appendChild(pairSlotDrag)\r\n\r\n            for (let j = 0; j < 3; j++) {\r\n                const pairSlotEl = document.createElement('div')\r\n                pairSlotEl.classList.add('pairSlot')\r\n\r\n                //If input pairing supplied then populate with new name  && i % 3 != 2\r\n                if (inputPairs != undefined && newNames[i + j] != '' && newNames[i + j] != undefined) {\r\n                    const nameEl = makeName(newNames[i + j])\r\n                    pairSlotEl.appendChild(nameEl)\r\n                }\r\n\r\n                //add event listeners\r\n                pairSlotEl.addEventListener('click', (e) => {\r\n                    const tempSelected = document.querySelector('.selected')\r\n                    if (tempSelected != null || tempSelected != undefined) {\r\n                        pairSlotEl.append(tempSelected)\r\n                        if (e.target != tempSelected) {\r\n                            tempSelected.classList.remove('selected')\r\n                            // console.log(\"Removed 3\")\r\n                            saveTemp()\r\n                        }\r\n                    }\r\n                })\r\n                pairSlotEl.addEventListener('dragover', (e) => {\r\n                    e.preventDefault()\r\n                    // console.log(e)\r\n                    if (!mobile) {\r\n                        const draggingEl = document.querySelector('.name.dragging')\r\n                        // console.log(draggingEl)\r\n                        // console.log(pref[names.indexOf(draggingEl.textContent)]);\r\n                        if (pairSlotEl.childElementCount < 2 && draggingEl) {\r\n                            //&& pref[names.indexOf(draggingEl.textContent)]\r\n                            pairSlotEl.appendChild(draggingEl)\r\n                        }\r\n                    }\r\n                })\r\n                pairSlotHolder.appendChild(pairSlotEl)\r\n            }\r\n            pairingHolder.appendChild(pairSlotHolder)\r\n        }\r\n    }\r\n    saveTemp()\r\n}\r\nfunction makeNames(inputPairs) {\r\n    // makes name list without the input parings\r\n    while (nameList.firstChild) {\r\n        // removed all previous names\r\n        nameList.removeChild(nameList.firstChild)\r\n    }\r\n    // if input pairs supplied then dont create those names\r\n    if (inputPairs != undefined) {\r\n        let tempNames = names.slice()\r\n        let newNames = Object.values(inputPairs)\r\n        // console.log('newnames', newNames)\r\n        let len = newNames.length\r\n        if (Object.values(inputPairs).length > slotsLength - 6) len--\r\n        for (let i = 0; i < len; i++) {\r\n            if (newNames[i] != '' && newNames[i] != undefined) {\r\n                tempNames.splice(tempNames.indexOf(newNames[i]), 1)\r\n                // console.log(tempNames)\r\n            }\r\n        }\r\n        console.log('Tempnames:', tempNames)\r\n        tempNames.forEach((name) => {\r\n            const nameEl = makeName(name)\r\n            nameList.appendChild(nameEl)\r\n            if (absent.includes(nameEl.innerHTML)) {\r\n                nameEl.classList.add('absent')\r\n            }\r\n        })\r\n    } else {\r\n        // otherwise make all names\r\n        names.forEach((name) => {\r\n            const nameEl = makeName(name)\r\n            nameList.appendChild(nameEl)\r\n        })\r\n    }\r\n}\r\nfunction makeName(name) {\r\n    // creates single name\r\n    const nameEl = document.createElement('button')\r\n    if (picMode == false) {\r\n        nameEl.textContent = name\r\n    } else {\r\n        nameEl.innerHTML = name\r\n        let noPics = ['Adam', 'Alexander', 'Owen', 'Cascade', 'Cyrus', 'Gretchen I', 'Gretchen F', 'Holden', 'Nelson', 'Stella', 'Suraj', 'Zephyr']\r\n        if (!noPics.includes(name)) {\r\n            const profilePic = document.createElement('img')\r\n            profilePic.classList.add('profilePic')\r\n            profilePic.src = '/img/ppl/' + name + '.png'\r\n            // if(name == \"Carter\"){\r\n            //     profilePic.src = people[7].pic;\r\n            // }\r\n            nameEl.appendChild(profilePic)\r\n        }\r\n    }\r\n    nameEl.classList.add('name', 'draggable')\r\n    nameEl.setAttribute('draggable', 'true')\r\n    if (locked.includes(name)) nameEl.classList.add('locked')\r\n    if (absent.includes(name)) nameEl.classList.add('absent')\r\n\r\n    if (!mobile) {\r\n        // if on desktop\r\n        //Event listeners for dragging\r\n        nameEl.addEventListener('dragstart', () => {\r\n            nameEl.classList.add('dragging')\r\n        })\r\n\r\n        nameEl.addEventListener('dragend', async () => {\r\n            for (let i = 0; i < slotsLength / 3; i++) {\r\n                for (let j = 1; j < 4; j++) {\r\n                    const cur = pairingHolder.children[i].children[j]\r\n                    //console.log(cur)\r\n                    if (cur.childElementCount > 1) {\r\n                        nameList.appendChild(cur.children[0])\r\n                    }\r\n                }\r\n            }\r\n\r\n            nameEl.classList.remove('dragging')\r\n            saveTemp()\r\n            console.log('dragend: ', nameEl.textContent)\r\n        })\r\n\r\n        nameEl.addEventListener('click', async () => {\r\n            if (selAbsent) {\r\n                if (!absent.includes(nameEl.innerHTML)) {\r\n                    absent.push(nameEl.innerHTML)\r\n                    nameEl.classList.add('absent')\r\n                    nameList.appendChild(nameEl)\r\n                } else {\r\n                    absent.splice(absent.indexOf(nameEl.innerHTML), 1)\r\n                    nameEl.classList.remove('absent')\r\n                }\r\n                //console.log(absent);\r\n            } else if (selLocked) {\r\n                if (!locked.includes(nameEl.innerHTML)) {\r\n                    locked.push(nameEl.innerHTML)\r\n                    nameEl.classList.add('locked')\r\n                } else {\r\n                    locked.splice(locked.indexOf(nameEl.innerHTML), 1)\r\n                    nameEl.classList.remove('locked')\r\n                }\r\n            }\r\n        })\r\n    } else {\r\n        // otherwise mobile\r\n        nameEl.addEventListener('click', async () => {\r\n            if (!selAbsent && !selLocked) {\r\n                const tempSelected = document.querySelector('.selected')\r\n                if (tempSelected != null || tempSelected != undefined) {\r\n                    nameEl.parentElement.append(tempSelected)\r\n                    nameList.appendChild(nameEl)\r\n                    tempSelected.classList.remove('selected')\r\n                } else {\r\n                    nameEl.classList.add('selected')\r\n                }\r\n            } else if (selAbsent) {\r\n                if (!absent.includes(nameEl.innerHTML)) {\r\n                    absent.push(nameEl.innerHTML)\r\n                    nameEl.classList.add('absent')\r\n                } else {\r\n                    absent.splice(absent.indexOf(nameEl.innerHTML), 1)\r\n                    nameEl.classList.remove('absent')\r\n                }\r\n                //console.log(absent);\r\n            } else {\r\n                if (!locked.includes(nameEl.innerHTML)) {\r\n                    locked.push(nameEl.innerHTML)\r\n                    nameEl.classList.add('locked')\r\n                } else {\r\n                    locked.splice(locked.indexOf(nameEl.innerHTML), 1)\r\n                    nameEl.classList.remove('locked')\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < slotsLength / 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    const cur = pairingHolder.children[i].children[j]\r\n                    //console.log(cur)\r\n                    if (cur.childElementCount > 1) {\r\n                        nameList.appendChild(cur.children[0])\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    nameEl.addEventListener('click', async () => {\r\n        // console.log(prevClickName);\r\n        let old = document.querySelector('.name.tooltip')\r\n        if (old) {\r\n            old.setAttribute('data-tooltip', '')\r\n            old.classList.remove('tooltip')\r\n        }\r\n\r\n        if (prevClickName == name && Date.now() - prevClickTime < 250) {\r\n            // nameEl.classList.add('tooltip')\r\n            let prevParts = await getPrevPartners(name)\r\n            // if (!mobile) {\r\n            //   nameEl.setAttribute('data-tooltip', prevParts.join(', '))\r\n            // } else {\r\n            while (prevPairsHolder.firstChild) {\r\n                prevPairsHolder.removeChild(prevPairsHolder.firstChild)\r\n            }\r\n            prevPairs.style.display = 'block'\r\n            selectedName.textContent = name\r\n            prevParts.forEach((partner) => {\r\n                const nameEl = document.createElement('div')\r\n                nameEl.classList.add('name')\r\n                nameEl.innerHTML = partner\r\n                prevPairsHolder.appendChild(nameEl)\r\n            })\r\n            // }\r\n        }\r\n\r\n        prevClickName = name\r\n        prevClickTime = Date.now()\r\n    })\r\n\r\n    // if(name == 'Sabrina'){\r\n    //     nameEl.addEventListener('click', ()=>{\r\n    //         betoClicks++;\r\n    //         if(betoClicks == 10){\r\n    //             betoClicks = 0;\r\n    //             console.log('Sabrina secret');\r\n    //             location.href = 'https://smachef.wordpress.com'\r\n    //         }\r\n    //     })\r\n    // }\r\n    // if(name == 'Elliott'){\r\n    //     nameEl.addEventListener('click', ()=>{\r\n    //         elliottClicks++;\r\n    //         if(elliottClicks == 10){\r\n    //             elliottClicks = 0;\r\n    //             console.log('Elliott secret');\r\n    //             location.href = 'https://open.spotify.com/track/2QhURnm7mQDxBb5jWkbDug?si=806e79489ecd49bb'\r\n    //             // location.href = 'https://exoplanetresearch.netlify.app/'\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    return nameEl\r\n}\r\n\r\nfunction saveTemp() {\r\n    let pairs = { name: 'temp' }\r\n    // let pairsArray = []\r\n    for (let i = 0; i < slotsLength; i++) {\r\n        if (i % 3 == 0) {\r\n            for (let j = 0; j < 3; j++) {\r\n                if (pairingHolder.children[i / 3].children[j + 1] != undefined && pairingHolder.children[i / 3].children[j + 1].children[0]) {\r\n                    pairs[i + j] = pairingHolder.children[i / 3].children[j + 1].children[0].textContent\r\n                } else {\r\n                    pairs[i + j] = ''\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log('Pairs', pairs)\r\n\r\n    window.localStorage.setItem('tempPairs', JSON.stringify(pairs))\r\n}\r\n\r\n(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.onSnapshot)(pairsDB, async (snapshot) => {\r\n    pageReads++\r\n    loadingEl.style.display = 'block'\r\n    let namesObj = {}\r\n    snapshot.docs.forEach((doc) => {\r\n        namesObj[doc.data().name] = doc.id\r\n    })\r\n    let names = Object.keys(namesObj)\r\n\r\n    // if names exist create buttons for them\r\n    if (names.length > 0) {\r\n        while (loadHolder.firstChild) {\r\n            // remove old buttons\r\n            loadHolder.removeChild(loadHolder.firstChild)\r\n        }\r\n        // loop through names and create button\r\n        for (let i = 0; i < names.length; i++) {\r\n            const loadNameHolder = document.createElement('div')\r\n            loadNameHolder.classList.add('loadNameHolder')\r\n\r\n            const loadName = document.createElement('button')\r\n            loadName.classList.add('loadName')\r\n            loadName.textContent = names[i]\r\n            let tempName = loadName.textContent.replace(' ', '%20')\r\n            let tempSeason = season[0] + season[season.length - 2] + season[season.length - 1]\r\n            let link = `https://www.bhspairs.cf/?${tempSeason}/?p/${tempName}`\r\n            loadName.addEventListener('click', async () => {\r\n                // console.log(namesObj)\r\n                let pairs = await getPairs(namesObj[names[i]])\r\n                // window.location.href = link\r\n\r\n                // if pairs exist create them\r\n                if (pairs != null) {\r\n                    makeNames(pairs)\r\n                    makePairs(pairs)\r\n                    nameInput.value = ''\r\n                } else {\r\n                    makeNames()\r\n                    makePairs()\r\n                    alert('No pairs saved under this name.')\r\n                }\r\n                loadSaveContainer.style.display = 'none'\r\n            })\r\n\r\n            //Delete button\r\n            if (!mobile) {\r\n                const loadDel = document.createElement('button')\r\n                loadDel.classList.add('loadDel')\r\n                const loadDelIcon = document.createElement('i')\r\n                loadDelIcon.classList.add('fa-trash', 'fa-solid', 'fa-lg')\r\n                loadDel.appendChild(loadDelIcon)\r\n                loadDel.addEventListener('click', async () => {\r\n                    loadingEl.style.display = 'block'\r\n                    const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, 'pairs', namesObj[names[i]])\r\n                    await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.deleteDoc)(docRef)\r\n                    loadingEl.style.display = 'none'\r\n                })\r\n\r\n                const copyLink = document.createElement('button')\r\n                copyLink.classList.add('loadDel')\r\n                const copyLinkIcon = document.createElement('i')\r\n                copyLinkIcon.classList.add('fa-copy', 'fa-solid', 'fa-lg')\r\n                copyLink.appendChild(copyLinkIcon)\r\n                copyLink.addEventListener('click', () => {\r\n                    navigator.clipboard.writeText(link)\r\n                })\r\n\r\n                loadNameHolder.appendChild(loadName)\r\n                loadNameHolder.appendChild(copyLink)\r\n                loadNameHolder.appendChild(loadDel)\r\n            } else {\r\n                loadNameHolder.appendChild(loadName)\r\n            }\r\n            loadHolder.appendChild(loadNameHolder)\r\n        }\r\n    }\r\n    loadingEl.style.display = 'none'\r\n})\r\n\r\n;(0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.onSnapshot)(officialDB, (snapshot) => {\r\n    pageReads++\r\n    updateOfficial(snapshot)\r\n})\r\n\r\nfunction updateOfficial(snapshot) {\r\n    console.log(`Updating official w/${snapshot.docs}`)\r\n    let namesObj = {}\r\n    snapshot.docs.forEach((doc) => {\r\n        console.log(doc.data().season == season)\r\n        if (doc.data().season == season) namesObj[doc.data().name] = doc.id\r\n    })\r\n    let names = Object.keys(namesObj)\r\n    let sorted = names.sort(_client_js__WEBPACK_IMPORTED_MODULE_1__.compareFn)\r\n\r\n    while (officialList.firstChild) {\r\n        // remove old buttons\r\n        officialList.removeChild(officialList.firstChild)\r\n    }\r\n\r\n    if (names.length > 0) {\r\n        // loop through names and create button\r\n        for (let i = 0; i < sorted.length; i++) {\r\n            const loadNameHolder = document.createElement('div')\r\n            loadNameHolder.classList.add('loadNameHolder')\r\n\r\n            const loadName = document.createElement('button')\r\n            loadName.classList.add('loadName')\r\n            loadName.textContent = sorted[i]\r\n            let tempName = loadName.textContent.replace(' ', '%20')\r\n            let tempSeason = season[0] + season[season.length - 2] + season[season.length - 1]\r\n            let link = `https://www.bhspairs.cf/?${tempSeason}/?o/${tempName}`\r\n            loadName.addEventListener('click', async () => {\r\n                //on click get pairings from server\r\n                loadingEl.style.display = 'block'\r\n                let pairs = await getPairsOfficialOne(namesObj[sorted[i]])\r\n                loadingEl.style.display = 'none'\r\n\r\n                // window.location.href = link\r\n                // if pairs exist create them\r\n                if (pairs != null) {\r\n                    makeNames(pairs)\r\n                    makePairs(pairs)\r\n                    nameInput.value = ''\r\n                } else {\r\n                    makeNames()\r\n                    makePairs()\r\n                    alert('No pairs saved under this name.')\r\n                }\r\n                loadSaveContainer.style.display = 'none'\r\n            })\r\n            loadNameHolder.appendChild(loadName)\r\n            if (!mobile) {\r\n                const copyLink = document.createElement('button')\r\n                copyLink.classList.add('loadDel')\r\n                const copyLinkIcon = document.createElement('i')\r\n                copyLinkIcon.classList.add('fa-copy', 'fa-solid', 'fa-lg')\r\n                copyLink.appendChild(copyLinkIcon)\r\n                copyLink.addEventListener('click', () => {\r\n                    navigator.clipboard.writeText(link)\r\n                })\r\n                loadNameHolder.appendChild(copyLink)\r\n            }\r\n\r\n            officialList.appendChild(loadNameHolder)\r\n        }\r\n    }\r\n    console.log('PAGE READS:', pageReads)\r\n}\r\n\r\n//Gets list of saved paring names from server\r\nfunction getLocalSaved() {\r\n    let curPairs = JSON.parse(window.localStorage.getItem('pairs'))\r\n    console.log(curPairs)\r\n    if (curPairs != null) {\r\n        while (localSaved.firstChild) {\r\n            // remove old buttons\r\n            localSaved.removeChild(localSaved.firstChild)\r\n        }\r\n        // loop through names and create button\r\n        for (let i = 0; i < curPairs.length; i++) {\r\n            const loadNameHolder = document.createElement('div')\r\n            loadNameHolder.classList.add('loadNameHolder')\r\n\r\n            const loadName = document.createElement('button')\r\n            loadName.classList.add('loadName')\r\n            loadName.textContent = curPairs[i].name\r\n            loadName.addEventListener('click', () => {\r\n                // if pairs exist create them\r\n                if (curPairs[i] != null) {\r\n                    makeNames(curPairs[i])\r\n                    makePairs(curPairs[i])\r\n                    nameInput.value = ''\r\n                } else {\r\n                    getLocalSaved()\r\n                    makeNames()\r\n                    makePairs()\r\n                    alert('No pairs saved under this name.')\r\n                }\r\n            })\r\n\r\n            //Delete button\r\n            if (!mobile) {\r\n                const loadDel = document.createElement('button')\r\n                loadDel.classList.add('loadDel')\r\n                const loadDelIcon = document.createElement('i')\r\n                loadDelIcon.classList.add('fa-trash', 'fa-solid', 'fa-lg')\r\n                loadDel.appendChild(loadDelIcon)\r\n                loadDel.addEventListener('click', () => {\r\n                    curPairs.splice(i, 1)\r\n                    console.log(curPairs)\r\n                    window.localStorage.setItem('pairs', JSON.stringify(curPairs))\r\n                    getLocalSaved()\r\n                })\r\n                loadNameHolder.appendChild(loadDel)\r\n            }\r\n            loadNameHolder.appendChild(loadName)\r\n            localSaved.appendChild(loadNameHolder)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getBoatCount(snapshot, rtn) {\r\n    let pairingsObj = {}\r\n    snapshot.docs.forEach((doc) => {\r\n        data[doc.id] = doc.data()\r\n    })\r\n    let pairings = Object.values(pairingsObj)\r\n\r\n    let fjCount = new Array(names.length).fill(0)\r\n    let c420Count = new Array(names.length).fill(0)\r\n    let e420Count = new Array(names.length).fill(0)\r\n\r\n    let fjCut = 8 * 3\r\n    let e420Cut = fjCut + 6 * 3\r\n    let c420Cut = e420Cut + 2 * 3\r\n\r\n    for (let i = 0; i < pairings.length; i++) {\r\n        console.log(Object.values(pairings[i]).length)\r\n        for (let j = 0; j < fjCut; j++) {\r\n            fjCount[names.indexOf(pairings[i][j])]++\r\n        }\r\n        for (let j = fjCut; j < e420Cut; j++) {\r\n            e420Count[names.indexOf(pairings[i][j])]++\r\n        }\r\n        for (let j = e420Cut; j < c420Cut; j++) {\r\n            c420Count[names.indexOf(pairings[i][j])]++\r\n        }\r\n    }\r\n    // console.log(\"Boat count\",names,fjCount,c420Count,e420Count);\r\n    if (rtn == undefined) {\r\n        let girls = ['Elliott', 'Ava', 'Sabrina', 'Talia']\r\n        for (let i = 0; i < names.length; i++) {\r\n            const nameEl = document.createElement('div')\r\n            nameEl.classList.add('countName')\r\n            nameEl.innerHTML = names[i]\r\n\r\n            const gapEl = document.createElement('div')\r\n            gapEl.style.flexGrow = 1\r\n            nameEl.appendChild(gapEl)\r\n\r\n            const fjCountEl = document.createElement('div')\r\n            fjCountEl.classList.add('boatCount')\r\n            fjCountEl.innerHTML = fjCount[i]\r\n            nameEl.appendChild(fjCountEl)\r\n\r\n            const c420CountEl = document.createElement('div')\r\n            c420CountEl.classList.add('boatCount')\r\n            c420CountEl.innerHTML = c420Count[i]\r\n            nameEl.appendChild(c420CountEl)\r\n\r\n            const e420CountEl = document.createElement('div')\r\n            e420CountEl.classList.add('boatCount')\r\n            e420CountEl.innerHTML = e420Count[i]\r\n            nameEl.appendChild(e420CountEl)\r\n\r\n            if (fjCount[i] - c420Count[i] - e420Count[i] < 0 && !girls.includes(names[i])) {\r\n                nameEl.setAttribute('boat-karma', 'positive')\r\n            }\r\n            if (fjCount[i] - c420Count[i] - e420Count[i] > 0 && !girls.includes(names[i])) {\r\n                nameEl.setAttribute('boat-karma', 'negative')\r\n            }\r\n\r\n            countNamesHolder.appendChild(nameEl)\r\n        }\r\n    } else {\r\n        let karmalist = {}\r\n        for (let i = 0; i < names.length; i++) {\r\n            karmalist[names[i]] = fjCount[i] - c420Count[i] - e420Count[i]\r\n        }\r\n        const sortable = Object.entries(karmalist)\r\n            .sort((a, b) => a[1] - b[1])\r\n            .map((el) => el[0])\r\n        return sortable\r\n    }\r\n}\r\n\r\nasync function getPrevPartners(name, pairings) {\r\n    let partners = []\r\n\r\n    if (pairings == undefined) {\r\n        // let options = {\r\n        //     method: 'POST',\r\n        //     headers: { 'Content-Type': 'application/json' },\r\n        //     body: JSON.stringify({}),\r\n        // }\r\n        loadingEl.style.display = 'block'\r\n        // const response = await fetch(API_URL + '/getPairsOfficial', options)\r\n        // pairings = await response.json()\r\n        pairings = await getPairsOfficial()\r\n        pageReads++\r\n        loadingEl.style.display = 'none'\r\n    }\r\n\r\n    pairings = Object.values(pairings).sort(_client_js__WEBPACK_IMPORTED_MODULE_1__.compareFnObj)\r\n\r\n    for (let i = 0; i < pairings.length; i++) {\r\n        let nameIndex = Object.values(pairings[i]).indexOf(name)\r\n\r\n        if (Object.values(pairings[i]).includes(name)) {\r\n            //if skipper slot and isnt empty crew\r\n            if (nameIndex % 3 == 0 && pairings[i][nameIndex + 1] != undefined && pairings[i][nameIndex + 1] != '') {\r\n                partners.push(pairings[i][nameIndex + 1])\r\n\r\n                //if rotating slot is not empty\r\n                if (pairings[i][nameIndex + 2] != undefined && pairings[i][nameIndex + 2] != '') {\r\n                    partners.push(pairings[i][nameIndex + 2])\r\n                }\r\n\r\n                //if crew slot and skipper is not empty\r\n            } else if (nameIndex % 3 == 1 && pairings[i][nameIndex - 1] != undefined && pairings[i][nameIndex - 1] != '') {\r\n                partners.push(pairings[i][nameIndex - 1])\r\n\r\n                //if rotating slot and skipper is not empty\r\n            } else if (nameIndex % 3 == 2 && pairings[i][nameIndex - 2] != undefined && pairings[i][nameIndex - 2] != '') {\r\n                partners.push(pairings[i][nameIndex - 2])\r\n            }\r\n        }\r\n    }\r\n    console.log('Previous partners of ', name, partners)\r\n    return partners\r\n}\r\n\r\n//Gets the element after the one you are hovering on\r\nfunction getDragAfterElement(y) {\r\n    const draggableEls = [...pairingHolder.querySelectorAll('.pairSlotHolder')]\r\n\r\n    return draggableEls.reduce(\r\n        (closest, child) => {\r\n            const box = child.getBoundingClientRect()\r\n            const offset = y - box.top - box.height / 2\r\n\r\n            if (offset < 0 && offset > closest.offset) {\r\n                return { offset: offset, element: child }\r\n            } else {\r\n                return closest\r\n            }\r\n        },\r\n        { offset: Number.NEGATIVE_INFINITY }\r\n    ).element\r\n}\r\n\r\nasync function parseUrl() {\r\n    const urlArgs = window.location.search.split('/', 4)\r\n    console.log(urlArgs)\r\n    if (urlArgs[0] == '?F22') season = 'Fall 2022'\r\n    if (urlArgs[0] == '?S23') season = 'Spring 2023'\r\n    console.log(season)\r\n    let pairingName\r\n    if (urlArgs.length > 3) pairingName = urlArgs[2] + '/' + urlArgs[3]\r\n    else pairingName = urlArgs[2]\r\n    if (pairingName != undefined) pairingName = pairingName.replace('%20', ' ')\r\n    if (urlArgs[1] == '?p') {\r\n        let options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name: pairingName, season: season }),\r\n        }\r\n        loadingEl.style.display = 'block'\r\n        const response = await fetch(API_URL + '/getPairs', options)\r\n        const json = await response.json()\r\n        loadingEl.style.display = 'none'\r\n        console.log(json)\r\n\r\n        // if pairs exist create them\r\n        if (json.pairs != null) {\r\n            makeNames(json.pairs)\r\n            makePairs(json.pairs)\r\n            nameInput.value = ''\r\n        } else {\r\n            makeNames()\r\n            makePairs()\r\n            alert('No pairs saved under this name.')\r\n            window.location.href = window.location.href.split('/?')[0]\r\n        }\r\n    } else if (urlArgs[1] == '?o') {\r\n        let options = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name: pairingName, season: season }),\r\n        }\r\n        console.log(options.body)\r\n        loadingEl.style.display = 'block'\r\n        const response = await fetch(API_URL + '/getPairsOfficialOne', options)\r\n        const json = await response.json()\r\n        loadingEl.style.display = 'none'\r\n        console.log(json)\r\n\r\n        // if pairs exist create them\r\n        if (json.pairs != null) {\r\n            makeNames(json.pairs)\r\n            makePairs(json.pairs)\r\n            nameInput.value = ''\r\n        } else {\r\n            makeNames()\r\n            makePairs()\r\n            alert('No pairs saved under this name.')\r\n        }\r\n        loadSaveContainer.style.display = 'none'\r\n    }\r\n}\r\n\r\nasync function getPairs(id) {\r\n    let data = {}\r\n    let docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, 'pairs', id)\r\n    let docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(docRef)\r\n    pageReads++\r\n    return docSnap.data()\r\n}\r\n\r\nasync function getPairsOfficial() {\r\n    let data = {}\r\n    let snapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDocs)(officialDB)\r\n    pageReads++\r\n    snapshot.docs.forEach((doc) => {\r\n        data[doc.id] = doc.data()\r\n    })\r\n    return data\r\n}\r\nasync function getPairsOfficialOne(id) {\r\n    let data = {}\r\n    let docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.doc)(db, 'official-pairs', id)\r\n    let docSnap = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_3__.getDoc)(docRef)\r\n    pageReads++\r\n    return docSnap.data()\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://sailing-pairs/./docs/pairs.js?");

/***/ })

}]);